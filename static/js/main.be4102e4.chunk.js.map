{"version":3,"sources":["Cell/Cell.js","Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","evt","this","props","flipCellsAround","classes","isLit","className","onClick","handleClick","Component","Board","state","hasWonGame","board","createBoard","numMoves","handleReset","setState","y","numRows","row","x","numCols","push","Math","random","chanceLightsOn","coord","split","map","Number","flipCell","every","cell","console","log","tableBoard","key","Fragment","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be4102e4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Cell.css\";\n\nclass Cell extends Component {\n  handleClick(evt) {\n    // console.log(evt.target.parentNode.key);\n    this.props.flipCellsAround();\n  }\n\n  render() {\n    // console.log(this.props);\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return <td className={classes} onClick={() => this.handleClick()} />;\n  }\n}\n\nexport default Cell;\n","import React, { Component } from \"react\";\nimport Cell from \"../Cell/Cell\";\nimport \"./Board.css\";\n\nclass Board extends Component {\n  state = {\n    hasWonGame: false,\n    board: this.createBoard(),\n    numMoves: 0\n  };\n\n  createBoard() {\n    // console.log(\"NUMROWS\", this.props);\n    let board = [];\n    for (let y = 0; y < this.props.numRows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.numCols; x++) {\n        row.push(Math.random() < this.props.chanceLightsOn);\n      }\n\n      board.push(row);\n    }\n    return board;\n  }\n\n  flipCellsAround(coord) {\n    // console.log(\"FLIPPING\", coord);\n    let { numCols, numRows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    this.flipCell(board, y, x, numCols, numRows);\n    this.flipCell(board, y, x - 1, numCols, numRows);\n    this.flipCell(board, y, x + 1, numCols, numRows);\n    this.flipCell(board, y - 1, x, numCols, numRows);\n    this.flipCell(board, y + 1, x, numCols, numRows);\n  }\n\n  flipCell(board, y, x, numCols, numRows) {\n    // console.log(\"BOARD?\", y, x, board);\n\n    if (x >= 0 && x < numCols && y >= 0 && y < numRows) {\n      board[y][x] = !board[y][x];\n    }\n    let hasWonGame = board.every(row => row.every(cell => !cell));\n    let numMoves = this.state.numMoves + 1;\n\n    // console.log(\"BOARD NOW\", board);\n\n    this.setState({ board, hasWonGame, numMoves });\n  }\n  handleReset = () => {\n    this.setState({ board: this.createBoard(), numMoves: 0 });\n  };\n  /** Render game board or winning message. */\n\n  render() {\n    console.log(this.state.numMoves);\n    let tableBoard = [];\n    for (let y = 0; y < this.props.numRows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.numCols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAround={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tableBoard.push(<tr key={y}>{row}</tr>);\n    }\n    // console.log(\"state\", this.state);\n\n    return (\n      <React.Fragment>\n        <h3>Number of Moves: {this.state.numMoves}</h3>\n        <table className=\"Board\">\n          {this.state.hasWonGame ? (\n            <h1>\"You won!\"</h1>\n          ) : (\n            <tbody>{tableBoard}</tbody>\n          )}\n        </table>\n        {this.state.hasWonGame ? null : (\n          <button className=\"Button\" onClick={this.handleReset}>\n            Reset\n          </button>\n        )}\n      </React.Fragment>\n    );\n  }\n}\nBoard.defaultProps = {\n  numRows: 5,\n  numCols: 5,\n  chanceLightsOn: 0.25\n};\n\n// allow user to chooese difficulty// size of board\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board/Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1> Lights Out </h1>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}